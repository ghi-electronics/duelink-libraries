module 'DUELink Sensors'
author GHIElectronics
version 0 4 
choices dueSensors_axis x y z 
choices dueSensors_touchPin P0 P1 P2 A B left right up down 
description 'Sensor library for educational DUELink boards.

Note: Touch sensing works only on pins with capacitive touch circuits including pins 0, 1, 2 of the CincoBit and PixoBit and all but the SCL/SDA pins of the ClipIt.
'
variables dueSensors_accelAddr 

  spec 'r' 'dueSensors_light' 'due light level'
  spec 'r' 'dueSensors_touched' 'due pin _  touched : threshold _' 'num.dueSensors_touchPin num' 0 100
  space
  spec 'r' 'dueSensors_temperature' 'dueSTEM temperature'
  spec 'r' 'dueSensors_tilt' 'dueSTEM tilt _' 'menu.dueSensors_axis' 'x'
  space
  spec 'r' '_dueSensors_pulseTime' '_dueSensors_pulseTime _' 'num' 0
  spec ' ' '_dueSensors_accelInit' '_dueSensors_accelInit'
  spec 'r' '_dueSensors_accelRead16BitReg' '_dueSensors_accelRead16BitReg _' 'auto' 13

to '_dueSensors_accelInit' {
  if (dueSensors_accelAddr != 0) {return}
  dueSensors_accelAddr = (hexToInt '4C')
  comment 'Turn off accelerometer before changing settings'
  i2cSet dueSensors_accelAddr 7 0
  comment 'Sampling rate: 128 Hz'
  i2cSet dueSensors_accelAddr 8 9
  comment '+/-2G range, 10-bit resolution'
  i2cSet dueSensors_accelAddr (hexToInt '20') 3
  comment 'Start accelerometer'
  i2cSet dueSensors_accelAddr 7 1
}

to '_dueSensors_accelRead16BitReg' reg {
  '_dueSensors_accelInit'
  local 'buf' (newList 2)
  '[sensors:i2cWrite]' (hexToInt '4C') ('[data:makeList]' reg) false
  '[sensors:i2cRead]' (hexToInt '4C') buf
  local '16bit' (((at 2 buf) << 8) | (at 1 buf))
  '16bit' = (((v '16bit') << 15) >> 15)
  return ((100 * (v '16bit')) / 1023)
}

to '_dueSensors_pulseTime' pin {
  comment 'Charge up pin'
  digitalWriteOp pin true
  waitMicros 200
  callCustomCommand '[sensors:captureStart]' ('[data:makeList]' pin)
  waitUntil ((callCustomReporter '[sensors:captureCount]') > 0)
  local 'pulses' (callCustomReporter '[sensors:captureEnd]')
  comment 'Start charging pin'
  digitalWriteOp pin true
  return (at 1 pulses)
}

to dueSensors_light {
  return ('[display:lightLevel]')
}

to dueSensors_temperature {
  if ((boardType) != 'DueSTEM') {return 0}
  local 'mVx10' ((33000 * (analogReadOp 9)) / 1023)
  return ((mVx10 - 4000) / 195)
}

to dueSensors_tilt axis {
  if ('x' == axis) {
    return ('_dueSensors_accelRead16BitReg' 13)
  } ('y' == axis) {
    return (0 - ('_dueSensors_accelRead16BitReg' 15))
  } ('z' == axis) {
    return ('_dueSensors_accelRead16BitReg' 17)
  }
  return 0
}

to dueSensors_touched pin optionalThreshold {
  if ('P0' == pin) {
    pin = 0
  } ('P1' == pin) {
    pin = 1
  } ('P2' == pin) {
    pin = 2
  } ('P3' == pin) {
    pin = 3
  } ('A' == pin) {
    pin = 10
  } ('B' == pin) {
    pin = 24
  } ('left' == pin) {
    pin = 14
  } ('right' == pin) {
    pin = 12
  } ('up' == pin) {
    pin = 13
  } ('down' == pin) {
    pin = 18
  }
  local 'pTime' ('_dueSensors_pulseTime' pin)
  if (pTime < 0) {
    comment 'Negative pulse time glitch; try again'
    pTime = ('_dueSensors_pulseTime' pin)
  }
  waitMillis 5
  return (pTime > (argOrDefault 2 100))
}

